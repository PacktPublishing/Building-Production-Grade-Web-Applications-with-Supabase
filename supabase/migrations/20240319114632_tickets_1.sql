create type "public"."ticket_status" as enum ('open', 'in_progress', 'information_missing', 'canceled', 'done');

create table "public"."tickets" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "description" text not null,
    "created_by" bigint not null,
    "tenant" text not null,
    "status" ticket_status not null default 'open'::ticket_status,
    "author_name" text not null
);


alter table "public"."tickets" enable row level security;

CREATE UNIQUE INDEX tickets_pkey ON public.tickets USING btree (id);

alter table "public"."tickets" add constraint "tickets_pkey" PRIMARY KEY using index "tickets_pkey";

alter table "public"."tickets" add constraint "public_tickets_created_by_fkey" FOREIGN KEY (created_by) REFERENCES service_users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."tickets" validate constraint "public_tickets_created_by_fkey";

alter table "public"."tickets" add constraint "public_tickets_tenant_fkey" FOREIGN KEY (tenant) REFERENCES tenants(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."tickets" validate constraint "public_tickets_tenant_fkey";

alter table "public"."tickets" add constraint "tickets_description_check" CHECK ((length(description) > 9)) not valid;

alter table "public"."tickets" validate constraint "tickets_description_check";

alter table "public"."tickets" add constraint "tickets_title_check" CHECK ((length(title) > 4)) not valid;

alter table "public"."tickets" validate constraint "tickets_title_check";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.set_created_by_value()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  NEW.created_by = (SELECT id FROM service_users WHERE supabase_user = auth.uid());
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.set_ticket_author_name()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  NEW.author_name = (SELECT full_name FROM service_users WHERE supabase_user = auth.uid());
  RETURN NEW;
END;
$function$
;

grant delete on table "public"."tickets" to "anon";

grant insert on table "public"."tickets" to "anon";

grant references on table "public"."tickets" to "anon";

grant select on table "public"."tickets" to "anon";

grant trigger on table "public"."tickets" to "anon";

grant truncate on table "public"."tickets" to "anon";

grant update on table "public"."tickets" to "anon";

grant delete on table "public"."tickets" to "authenticated";

grant insert on table "public"."tickets" to "authenticated";

grant references on table "public"."tickets" to "authenticated";

grant select on table "public"."tickets" to "authenticated";

grant trigger on table "public"."tickets" to "authenticated";

grant truncate on table "public"."tickets" to "authenticated";

grant update on table "public"."tickets" to "authenticated";

grant delete on table "public"."tickets" to "service_role";

grant insert on table "public"."tickets" to "service_role";

grant references on table "public"."tickets" to "service_role";

grant select on table "public"."tickets" to "service_role";

grant trigger on table "public"."tickets" to "service_role";

grant truncate on table "public"."tickets" to "service_role";

grant update on table "public"."tickets" to "service_role";

create policy "allow inserting a ticket to allowed tenants"
on "public"."tickets"
as permissive
for insert
to authenticated
with check (COALESCE((((auth.jwt() -> 'app_metadata'::text) -> 'tenants'::text) ? tenant), false));


create policy "allow reading tickets of allowed tenant"
on "public"."tickets"
as permissive
for select
to authenticated
using (COALESCE((((auth.jwt() -> 'app_metadata'::text) -> 'tenants'::text) ? tenant), false));


CREATE TRIGGER tr_tickets_autoset_author_name BEFORE INSERT ON public.tickets FOR EACH ROW EXECUTE FUNCTION set_ticket_author_name();

CREATE TRIGGER tr_tickets_autoset_created_by BEFORE INSERT ON public.tickets FOR EACH ROW EXECUTE FUNCTION set_created_by_value();
