drop trigger if exists "tr_tickets_autoset_author_name" on "public"."tickets";

drop function if exists "public"."set_ticket_author_name"();

create table "public"."comments" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "tenant" text not null,
    "created_by" bigint not null,
    "author_name" text not null,
    "comment_text" text not null,
    "ticket" bigint not null
);


alter table "public"."comments" enable row level security;

CREATE UNIQUE INDEX comments_pkey ON public.comments USING btree (id);

alter table "public"."comments" add constraint "comments_pkey" PRIMARY KEY using index "comments_pkey";

alter table "public"."comments" add constraint "public_comments_created_by_fkey" FOREIGN KEY (created_by) REFERENCES service_users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."comments" validate constraint "public_comments_created_by_fkey";

alter table "public"."comments" add constraint "public_comments_tenant_fkey" FOREIGN KEY (tenant) REFERENCES tenants(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."comments" validate constraint "public_comments_tenant_fkey";

alter table "public"."comments" add constraint "public_comments_ticket_fkey" FOREIGN KEY (ticket) REFERENCES tickets(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."comments" validate constraint "public_comments_ticket_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.autoset_author_name()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  NEW.author_name = (SELECT full_name FROM service_users WHERE supabase_user = auth.uid());
  RETURN NEW;
END;
$function$
;

grant delete on table "public"."comments" to "anon";

grant insert on table "public"."comments" to "anon";

grant references on table "public"."comments" to "anon";

grant select on table "public"."comments" to "anon";

grant trigger on table "public"."comments" to "anon";

grant truncate on table "public"."comments" to "anon";

grant update on table "public"."comments" to "anon";

grant delete on table "public"."comments" to "authenticated";

grant insert on table "public"."comments" to "authenticated";

grant references on table "public"."comments" to "authenticated";

grant select on table "public"."comments" to "authenticated";

grant trigger on table "public"."comments" to "authenticated";

grant truncate on table "public"."comments" to "authenticated";

grant update on table "public"."comments" to "authenticated";

grant delete on table "public"."comments" to "service_role";

grant insert on table "public"."comments" to "service_role";

grant references on table "public"."comments" to "service_role";

grant select on table "public"."comments" to "service_role";

grant trigger on table "public"."comments" to "service_role";

grant truncate on table "public"."comments" to "service_role";

grant update on table "public"."comments" to "service_role";

CREATE TRIGGER tr_comments_autoset_author_name BEFORE INSERT ON public.comments FOR EACH ROW EXECUTE FUNCTION autoset_author_name();
CREATE TRIGGER tr_comments_autoset_created_by BEFORE INSERT ON public.comments FOR EACH ROW EXECUTE FUNCTION set_created_by_value();

CREATE TRIGGER tr_tickets_autoset_author_name BEFORE INSERT ON public.tickets FOR EACH ROW EXECUTE FUNCTION autoset_author_name();
